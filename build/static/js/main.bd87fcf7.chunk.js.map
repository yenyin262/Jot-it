{"version":3,"sources":["pages/Home/style.module.scss","components/ListView/style.module.scss","components/PlayView/style.module.scss","components/Form/style.module.scss","components/AllDone/style.module.scss","assets/bin.svg","pages/List/style.module.scss","assets/task.png","components/Form/Form.js","pages/Home/Home.js","components/AllDone/AllDone.js","components/ListView/ListView.js","components/PlayView/PlayView.js","pages/List/List.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","onAddStep","placeholder","name","useState","text","setText","className","styles","formContainer","form","onSubmit","event","preventDefault","onChange","e","target","value","type","textStyle","aria-label","addbtn","Home","lists","setLists","showInput","setShowInput","homeContainer","style","textAlign","fontSize","Date","toDateString","listSection","block_title","btnContainer","onClick","btn_showInput","newLists","id","nanoid","date","items","mainContainer","map","list","listContainer","key","listLink","to","btn","filter","item","handleRemove","src","binIcon","alt","length","imgContainer","taskIcon","img","AllDone","container","size","button","homeLink","ListView","onChecked","onPlay","onDelete","dateContainer","slideshow","playbtn","container_reciepe","pageTitle","pageTitleContent","listContent","el","index","itemList","checked","listText","noListMessage","PlayView","setChecked","useEffect","inputContainer","input","readOnly","displayText","nextBtnContainer","disabled","setTimeout","getCurrentList","find","state","getUpdatedLists","prevLists","newList","oldList","List","useParams","React","useMemo","idx","findIndex","setItems","setLastUnchecked","useCallback","newItems","setCurrent","setPageState","setMessage","current","message","pageState","handleCheckedBox","currentList","updatedList","showMessage","alert","sis","updateList","App","initialState","localStorage","getItem","JSON","parse","getInitialState","handleSetLists","updatedLists","setItem","stringify","padding","color","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.bd87fcf7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"homeContainer\":\"style_homeContainer__2RLad\",\"block_title\":\"style_block_title__3HtqS\",\"btnContainer\":\"style_btnContainer__14Y-p\",\"addbtn\":\"style_addbtn__iqGYQ\",\"mainContainer\":\"style_mainContainer__3JKb3\",\"listContainer\":\"style_listContainer__3TATI\",\"listLink\":\"style_listLink__21GXI\",\"btn\":\"style_btn__3sneX\",\"imgContainer\":\"style_imgContainer__3x7QI\",\"listSection\":\"style_listSection__15xnF\",\"img\":\"style_img__2dGUp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__-T4az\",\"dateContainer\":\"style_dateContainer__16q0K\",\"slideshow\":\"style_slideshow__2rcAs\",\"noListMessage\":\"style_noListMessage__18yog\",\"containerBtn\":\"style_containerBtn__3KbHp\",\"playbtn\":\"style_playbtn__1Sv9O\",\"pageTitle\":\"style_pageTitle__13ih0\",\"pageTitleContent\":\"style_pageTitleContent__2XLkK\",\"btn\":\"style_btn__1wUbJ\",\"itemList\":\"style_itemList__2nWMU\",\"listText\":\"style_listText__BUbN5\",\"listContent\":\"style_listContent__32qrF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__7L72-\",\"inputContainer\":\"style_inputContainer__1kUYm\",\"input\":\"style_input__1ZB0p\",\"displayText\":\"style_displayText__1AKQq\",\"nextBtnContainer\":\"style_nextBtnContainer__3svuY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"style_formContainer__fw12H\",\"form\":\"style_form__2MFG6\",\"textStyle\":\"style_textStyle__2hp5e\",\"addbtn\":\"style_addbtn__19lvf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__3uQ07\",\"textStyle\":\"style_textStyle__3EJcA\",\"button\":\"style_button__2LIdN\",\"homeLink\":\"style_homeLink__28Ykg\"};","module.exports = __webpack_public_path__ + \"static/media/bin.63a7e4ec.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"showMessage\":\"style_showMessage__3Wvei\",\"sis\":\"style_sis__15gAc\"};","module.exports = __webpack_public_path__ + \"static/media/task.07386719.png\";","import React, { useState } from \"react\";\nimport styles from \"./style.module.scss\";\n\nexport default function Form({ onAddStep, placeholder, name }) {\n  const [text, setText] = useState(\"\");\n\n  const handleAdd = (event) => {\n    event.preventDefault();\n    if (text) {\n      onAddStep(text);\n      setText(\"\");\n    }\n  };\n\n  return (\n    <div className={styles.formContainer}>\n      <form className={styles.form} onSubmit={handleAdd}>\n        <input\n          onChange={(e) => setText(e.target.value)}\n          value={text}\n          type=\"text\"\n          className={styles.textStyle}\n          placeholder={placeholder}\n          aria-label=\"field\"\n          name={name}\n        />\n\n        <button className={styles.addbtn}>{name} </button>\n      </form>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Form from \"../../components/Form/Form\";\nimport styles from \"./style.module.scss\";\nimport { nanoid } from \"nanoid\";\nimport taskIcon from \"../../assets/task.png\";\nimport binIcon from \"../../assets/bin.svg\";\n\nexport default function Home({ lists, setLists }) {\n  // add function that generates the color\n  // put color into the list view templated [ id name, item]\n  // click on that button > pass in as prop\n\n  //\n\n  // const handleColors = () => {\n  // generate random number :)\n  // Math.floor(Math.random * (max-min) + min)\n  // }\n\n  const [showInput, setShowInput] = useState(false);\n\n  const handleAdd = (text) => {\n    // creating lists shape\n    let newLists = [\n      ...lists,\n      { id: nanoid(), date: new Date().toDateString(), name: text, items: [] },\n    ];\n    setLists(newLists);\n    setShowInput(false);\n  };\n\n  const handleRemove = (id) => {\n    let newLists = lists.filter((item) => item.id !== id);\n    setLists(newLists);\n  };\n\n  return (\n    <div className={styles.homeContainer}>\n      <h3 style={{ textAlign: \"center\", fontSize: \"18px\" }}>\n        {new Date().toDateString()}\n      </h3>\n\n      {!showInput && (\n        <div className={styles.listSection}>\n          <div className={styles.block_title}>Add Task</div>\n          <div className={styles.btnContainer}>\n            <button\n              onClick={() => setShowInput(true)}\n              className={styles.addbtn}\n            >\n              +\n            </button>\n            <span></span>\n          </div>\n        </div>\n      )}\n\n      {showInput && (\n        <div className={styles.btn_showInput}>\n          <Form\n            onAddStep={handleAdd}\n            placeholder=\"Untitled List\"\n            name=\"Add Task\"\n          />\n        </div>\n      )}\n      <div className={styles.mainContainer}>\n        {lists.map((list) => {\n          return (\n            <div className={styles.listContainer} key={list.id}>\n              <Link className={styles.listLink} to={`/list/${list.id}`}>\n                {list.name}\n              </Link>\n              <button\n                className={styles.btn}\n                onClick={() => handleRemove(list.id)}\n              >\n                <img src={binIcon} alt={\"bin icon\"} />\n              </button>\n            </div>\n          );\n        })}\n      </div>\n      {/* show img only when there is no list  */}\n      {lists.length < 1 && (\n        <div className={styles.imgContainer}>\n          <img src={taskIcon} alt=\"task\" className={styles.img} />\n        </div>\n      )}\n    </div>\n  );\n}\n","import { FaCheck } from \"react-icons/fa\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"./style.module.scss\";\nexport default function AllDone({ onClick, list }) {\n  return (\n    <div className={styles.container}>\n      <FaCheck size=\"2rem\" />\n\n      <div className={styles.textStyle}>All Done! </div>\n\n      <button className={styles.button} onClick={onClick}>\n        Return to {list.name}\n      </button>\n      <Link className={styles.homeLink} to=\"/\">\n        Go to Home\n      </Link>\n    </div>\n  );\n}\n","import React from \"react\";\nimport styles from \"./style.module.scss\";\nimport Form from \"../Form/Form\";\nimport binIcon from \"../../assets/bin.svg\";\n// test ListView renders component with no items\n// test ListView renders component with  items\n// test onAddStep prop called with correct text attribute\n// onPlay = test that it was called once\n//  onChecked is called with two attributes(el, index)\n// onDelete is called with correct attribute (index)\n\nconst ListView = ({ list, items, onAddStep, onChecked, onPlay, onDelete }) => {\n  return (\n    <div className={styles.container}>\n      <div className={styles.dateContainer}>\n        <span style={{ fontSize: \"12px\" }}>Date Added:</span>\n        <h5>{list.date}</h5>\n      </div>\n      <div className={styles.slideshow}>\n        <div className=\"textClick\">Click </div>\n        <button className={styles.playbtn} onClick={onPlay}>\n          &#x25BA;\n        </button>\n        <div>for FullScreen View </div>\n      </div>\n      <div className={styles.container_reciepe}>\n        <Form\n          placeholder={`add to ${list.name} list`}\n          onAddStep={onAddStep}\n          name={\"Add Subtask\"}\n        />\n        <div className={styles.pageTitle}>\n          {/*  try to change color list.name via props */}\n          <div className={styles.pageTitleContent}>{list.name} list</div>\n        </div>\n        {/* check receipes length if it is empty show no content */}\n        {items.length > 0 ? (\n          <div className={styles.listContent}>\n            {items.map((el, index) => (\n              <div className={styles.itemList} key={el.id}>\n                <input\n                  type=\"checkbox\"\n                  checked={el.checked}\n                  onChange={() => onChecked(el, index)}\n                />\n                <div className={styles.listText}>{el.text}</div>\n                <button className={styles.btn} onClick={() => onDelete(index)}>\n                  <img src={binIcon} alt={\"bin icon\"} />\n                </button>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className={styles.noListMessage}>\n            No items on {list.name} list\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\nexport default ListView;\n","import React, { useEffect, useState } from \"react\";\nimport styles from \"./style.module.scss\";\n\n// test if component render with el and index\n// onchecked prop is called with attribute el, index\n//queryByText\n\nexport default function PlayView({ onChecked, el, index }) {\n  // index is passed on to check if list is unchecked and checked\n\n  const [checked, setChecked] = useState(false);\n\n  // useEffect is needed so that when element changes it resets the state of checked\n\n  useEffect(() => {\n    setChecked(false);\n  }, [el]);\n\n  // when button is clicked setChecked becomes true\n  // onChecked prop is called when setTimeout runs, which moves to the next item\n\n  const handleClick = () => {\n    setChecked(true);\n\n    setTimeout(() => {\n      onChecked(el, index);\n    }, 500);\n  };\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.inputContainer}>\n        <input\n          className={styles.input}\n          type=\"checkbox\"\n          checked={checked}\n          readOnly\n        />\n      </div>\n      <div className={styles.displayText}> {el.text}</div>\n      <div className={styles.nextBtnContainer}>\n        <button disabled={checked} onClick={() => handleClick()}>\n          NEXT\n        </button>\n      </div>\n    </div>\n  );\n}\n","import { nanoid } from \"nanoid\";\nimport React, { useEffect, useCallback } from \"react\";\nimport { useParams, Redirect } from \"react-router-dom\";\nimport \"../../App.css\";\nimport AllDone from \"../../components/AllDone\";\nimport ListView from \"../../components/ListView/ListView\";\nimport PlayView from \"../../components/PlayView/PlayView\";\n\nimport styles from \"./style.module.scss\";\n\nconst INITIAL = \"init\";\nconst PLAYING = \"playing\";\nconst ALL_DONE = \"all-done\";\n\n// const [colorIndex, setColorIndex] = useState(0);\n// const colors = [\"#542581\", \"#ff414e\", \"#279279\"];\n\n//useEffect(() => {\n//document.getElementsByClassName(\"pageTitleContent\") = colors[colorIndex];\n//},[colorIndex]);\n\n// function handleChangeColor() {\n//   const nextIndex = colorIndex + 1 === colors.length ? 0 : colorIndex + 1;\n//   setColorIndex(nextIndex);\n//   }\n\n// function getBgColor(index) {\n//   if (3 * index + 1 === index + 1) {\n//     console.log(1);\n//   } else if (3 * index + 2 === index + 1) {\n//     console.log(2);\n//   } else if (3 * index + 3 === index + 1) {\n//     console.log(3);\n//   } else {\n//     console.log(index, \"not working\");\n//   }\n// }\n\n// prop lists passed from App.js - being the key that holds the initialState value\n//  this functions finds the first object that matches ID\nfunction getCurrentList(lists, id) {\n  return lists.find((state) => {\n    return state.id === id;\n  });\n}\n\n// getting update of the lists\nfunction getUpdatedLists(prevLists, newList) {\n  return prevLists.map((oldList) => {\n    if (oldList.id === newList.id) {\n      return newList;\n    }\n    return oldList;\n  });\n}\n\n// creating List component\nfunction List({ lists, setLists }) {\n  // for routing\n  let { id } = useParams();\n\n  const [list, index] = React.useMemo(() => {\n    const idx = lists.findIndex((list) => list.id === id);\n    const val = lists[idx];\n\n    return [val, idx];\n  }, [lists, id]);\n\n  const [items, setItems] = React.useState([]);\n\n  useEffect(() => {\n    setItems(!list ? [] : list.items);\n    // getBgColor(index);\n  }, [list, index]);\n\n  // check if thats the last unchecked item\n  // in order to reset lists and show all done!\n  const setLastUnchecked = useCallback(\n    (newItems) => {\n      if (items.length > 0) {\n        const index = newItems.findIndex((el) => !el.checked);\n        // -1 = nothing unchecked or everything checked\n        if (index === -1) {\n          setCurrent(null);\n          setPageState(ALL_DONE);\n          // setAllDone(true);\n          // setPlay(false);\n        } else {\n          setCurrent(index);\n        }\n      }\n    },\n    [items.length]\n  );\n\n  useEffect(() => {\n    setLastUnchecked(items);\n\n    if (items.length > 0) {\n      setMessage(null);\n    }\n  }, [items, setLastUnchecked]);\n\n  // 2. create current state to pass to first page and show current\n  const [current, setCurrent] = React.useState(null);\n\n  //3. create alldone as state to show list done\n  // const [allDone, setAllDone] = React.useState(false);\n\n  //4. create play state to show second page slideshow when play btn clicked\n  // const [play, setPlay] = React.useState(false);\n\n  const [message, setMessage] = React.useState(\"\");\n\n  const [pageState, setPageState] = React.useState(INITIAL);\n\n  // resetList is a function to resetList - it resets the initial state\n  const resetList = () => {\n    setCurrent(null);\n    // setAllDone(false);\n    // setPlay(false);\n\n    setPageState(INITIAL);\n\n    const currentList = getCurrentList(lists, list.id);\n\n    const updateList = {\n      ...currentList,\n      items: currentList.items.map((item) => {\n        return { ...item, checked: !item.checked };\n      }),\n    };\n\n    setLists(getUpdatedLists(lists, updateList));\n  };\n\n  //4. A function to add another list\n  const handleAddNewStep = (text) => {\n    const currentList = getCurrentList(lists, list.id);\n\n    const updatedList = {\n      ...currentList,\n      items: [\n        ...currentList.items,\n        {\n          id: nanoid(),\n          text: text,\n          checked: false,\n        },\n      ],\n    };\n\n    setLists(getUpdatedLists(lists, updatedList));\n  };\n\n  //5. A  function to delete\n  const handleDelete = (index) => {\n    const currentList = getCurrentList(lists, list.id);\n\n    const updatedList = {\n      ...currentList,\n      items: items.filter((item, id) => id !== index),\n    };\n    setLists(getUpdatedLists(lists, updatedList));\n  };\n\n  //6. sets new value when checked\n  const handleCheckedBox = (item, index) => {\n    const currentList = getCurrentList(lists, list.id);\n    const updatedList = {\n      ...currentList,\n      items: currentList.items.map((item, idx) => {\n        if (idx !== index) {\n          return item;\n        }\n        return { ...item, checked: !item.checked };\n      }),\n    };\n\n    setLists(getUpdatedLists(lists, updatedList));\n  };\n\n  //7. A function to play as slideshow\n  const handlePlay = () => {\n    setLastUnchecked(items);\n\n    if (items.length > 0) {\n      // setPlay(true);\n      setPageState(PLAYING);\n    } else {\n      setMessage(\n        alert(\"Please add something to your list before clicking play\")\n      );\n    }\n  };\n\n  if (!list) {\n    return <Redirect to=\"/\" />;\n  }\n\n  // when prop use name of prop \"on\"\n  // when naming functions use \"Handle\"\n  return (\n    <>\n      <div className={styles.showMessage}>{message}</div>\n      {/* {!play && !allDone && ( */}\n      {pageState === INITIAL && (\n        <ListView\n          // prop=value\n          list={list}\n          items={items}\n          onAddStep={handleAddNewStep}\n          onChecked={handleCheckedBox}\n          onPlay={handlePlay}\n          onDelete={handleDelete}\n        />\n      )}\n      {pageState === PLAYING && current !== null && (\n        // {play && current !== null && !allDone && (\n        <div className={styles.sis}>\n          <PlayView\n            onChecked={handleCheckedBox}\n            el={items[current]}\n            index={current}\n          />\n        </div>\n      )}\n\n      {pageState === ALL_DONE && <AllDone list={list} onClick={resetList} />}\n    </>\n  );\n}\n\nexport default List;\n","import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport Home from \"./pages/Home/Home\";\nimport List from \"./pages/List/List\";\n\nimport { FaHome } from \"react-icons/fa\";\n\nconst LOCALSTORAGE_KEY = \"ynl-data\";\n\nfunction getInitialState() {\n  const initialState = localStorage.getItem(LOCALSTORAGE_KEY);\n  if (initialState === null) {\n    return [];\n  } else {\n    // convert from string to JSON object\n    return JSON.parse(initialState);\n  }\n}\n\n// const initialState = [\n//   {\n//     id: 1,\n//     name: \"shopping List\",\n//     items: [\n//       { id: 1, text: \"cinnamon\", checked: false },\n//       { id: 2, text: \"ORANGE\", checked: false },\n//     ],\n//   },\n// ];\n\nexport default function App() {\n  const [lists, setLists] = useState(getInitialState());\n\n  function handleSetLists(updatedLists) {\n    setLists(updatedLists);\n    localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(updatedLists));\n  }\n\n  return (\n    <Router>\n      <nav style={{ padding: \"10px\" }}>\n        <Link to=\"/\">\n          <FaHome size=\"3em\" color=\"black\" />\n        </Link>\n      </nav>\n      <Switch>\n        <Route path=\"/list/:id\">\n          <List lists={lists} setLists={handleSetLists} />\n        </Route>\n\n        <Route exact path=\"/\">\n          <Home lists={lists} setLists={handleSetLists} />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}